{"version":3,"file":"static/js/864.66dff56a.chunk.js","mappings":"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","sources":["components/Filter/Filter.styled.jsx","redux/contacts/contact-selectors.js","components/Filter/Filter.js","components/ContactList/ContactList.styled.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Notification/Notification.styled.jsx","components/Notification/Notification.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","components/Section/Section.styled.jsx","components/Section/Section.js","pages/ContactsPage.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Input = styled.input`\npadding-top: 14px;\npadding-bottom: 14px;\npadding-left: 10px;\nfont-weight: 400;\nfont-size: 14px;\nline-height: 1.88;\nletter-spacing: 0.06em;\nwidth: 200px;\nheight: 5px;\nborder: 1px solid rgba(33, 33, 33, 0.2);\nborder-radius: 4px;\ntransition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);, outline 250ms cubic-bezier(0.4, 0, 0.2, 1);;\n\n&:hover {\n  cursor: pointer;\n}\n\n&:focus-visible {\n  border: 1px solid #2196f3;\n  outline: none;\n}\n`;\n\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\nmargin-bottom: 15px;\n`;\n\nexport const LabelText = styled.span`\ncolor: black;\nfont-size: 14px;\nfont-weight: 700;\nline-height: 2;\nletter-spacing: 0.06em;\n`;\n","export const getFilter = state => state.contacts.filter;\n","import React from 'react';\nimport { Input, Label, LabelText } from './Filter.styled';\n// import { filterContacts } from '../../redux/contacts/contacts-actions';\nimport { filterContacts } from 'redux/contacts/contacts-slice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {getFilter} from '../../redux/contacts/contact-selectors'\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <Label>\n      <LabelText>Find contacts by name</LabelText>\n      <Input\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(filterContacts(e.target.value))}\n      />\n    </Label>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul``;\n\n","import styled from '@emotion/styled';\n\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n  width: 100wh;\n\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 500px;\n  }\n`;\n\nexport const Span = styled.span`\n  display: block;\n  width: 10px;\n  height: 10px;\n  margin-right: 5px;\n  border-radius: 50%;\n  background: black;\n  margin-left: 5px;\n`;\nexport const Btn = styled.button`\npadding: 2px 5px;\ncolor: black;\nbackground-color: #ffffffff;\nfont-weight: 500;\nfont-size: 10px;\nline-height: 1.88;\nletter-spacing: 0.06em;\nborder: none;\nborder-radius: 4px;\nborder: 1px solid rgba(238, 238, 238, 1);\nbox-shadow: 0px 4px 4px $button-shadow;\nwidth: 80px;\nheight: 25px;\nmargin-left: auto;\ntransition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);, background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n&:hover,\n&:focus {\n  background-color: #1e90ff;\n  color: #ffffffff;\n}\n&:active {\n  background-color: #1e90ff;\n  color: red;\n}\n`;\n","import React from 'react';\nimport { Span, Item, Btn } from './ContactListItem.styled';\nimport { useDeleteContactMutation } from '../../redux/contacts/contact-api';\n\nconst ContactListItem = ({ id, name, number }) => {\n  const [deleteContact, { isLoading: isDeliting }] = useDeleteContactMutation();\n\n  return (\n    <Item key={id}>\n      <Span></Span>\n      {name}: {number}\n      <Btn\n        type=\"button\"\n        disabled={isDeliting}\n        onClick={() => deleteContact(id)}\n      >\n        {isDeliting ? 'Deliting...' : 'Delete'}\n      </Btn>\n    </Item>\n  );\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport { List } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contact-selectors';\nimport ContactListItem from '../ContactListItem';\n\nconst ContactList = ({ contacts }) => {\n  const filter = useSelector(getFilter);\n\n  // console.log(filter)\n  // console.log(getFilter)\n  // console.log(contacts)\n\n  const filtredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return (\n      contacts &&\n      contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      )\n    );\n  };\n\n  const visibleContacts = filtredContacts();\n\n  return (\n    <List>\n      {visibleContacts.map(visibleContact => (\n        <ContactListItem key={visibleContact.id} {...visibleContact} />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import styled from \"@emotion/styled\";\n\nexport const Wraper = styled.div`\n\n`;\n\n\nexport const Text = styled.p`\ncolor: black;\nfont-weight: 700;\nfont-size: 16px;\nline-height: 1.88;\nletter-spacing: 0.06em;\n`;\n","import PropTypes from 'prop-types';\nimport { Wraper, Text } from './Notification.styled';\n\nfunction Notification({ message }) {\n  return (\n    <Wraper>\n      <Text>{message}</Text>\n    </Wraper>\n  );\n}\n\nNotification.prototype = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"textField\":\"ContactForm_textField__62nkS\"};","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport {\n  useCreateContactMutation,\n} from '../../redux/contacts/contact-api';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport style from './ContactForm.module.css';\n\nfunction ContactForm({ contacts }) {\n\n  const [createContact] = useCreateContactMutation();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const checkRepeatName = name => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n  };\n\n  const checkRepeatNumber = number => {\n    return contacts.find(contact => contact.number === number);\n  };\n\n  const checkEmptyQuery = (name, number) => {\n    return name.trim() === '' || number.trim() === '';\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (checkRepeatName(name)) {\n      return toast(`Contact with name \"${name}\" is already in phonebook`);\n    } else if (checkRepeatNumber(number)) {\n      return toast(`Contact with phone \"${number}\" is already in phonebook`);\n    } else if (checkEmptyQuery(name, number)) {\n      return toast.info(\"Enter the contact's name and number phone!\");\n    } else {\n      createContact({ name, number });\n      toast.info(\"Contact successfully add to your phonebook\");\n    }\n    resetInput();\n  };\n\n  const resetInput = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={style.form} autoComplete=\"off\" onSubmit={handleSubmit}>\n     <TextField\n        label=\"Name\"\n        variant=\"outlined\"\n        color=\"primary\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        className={style.textField}\n      />\n     \n     <TextField\n        label=\"Number\"\n        variant=\"outlined\"\n        color=\"primary\"\n        format=\"(###) ###-##-##\"\n        mask=\"_\"\n        pattern=\"^[0-9\\s\\(\\)\\-]{15}\"\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleChange}\n        className={style.textField}\n      />\n     \n  \n     <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n        >\n      Add contact\n        </Button>\n\n\n    </form>\n  );\n}\n\nexport default ContactForm;\n\n\n\n// import React from 'react';\n// import css from './ContactForm.module.css';\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\n// import * as yup from 'yup';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import {\n//   useCreateContactMutation,\n// } from '../../redux/contacts/contact-api';\n\n// const schema = yup.object().shape({\n//   name: yup\n//     .string()\n//     .min(2)\n//     .max(32)\n//     .trim()\n//     .matches()\n//     .required('Please enter name'),\n//   number: yup.number().required('Please enter phone number'),\n// });\n\n// const initialValues = {\n//   name: '',\n//   number: '',\n// };\n\n\n\n// const ContactForm = ({ contacts }) => {\n\n\n//   const [createContact] = useCreateContactMutation();\n\n\n//   const checkRepeatName = name => {\n//     return contacts.find(\n//       contact => contact.name.toLowerCase() === name.toLowerCase()\n//     );\n//   };\n\n//   const checkRepeatNumber = number => {\n//     return contacts.find(contact => contact.number === number);\n//   };\n\n//   const handleSubmit = (values, actions) => {\n//     const { name, number } = values;\n\n//     if (checkRepeatName(name)) {\n//       Notify.warning(`Contact with name \"${name}\" is already in phonebook`);\n//     } else if (checkRepeatNumber(number)) {\n//       Notify.warning(`Contact with phone \"${number}\" is already in phonebook`);\n//     } else {\n//       createContact({ name, number });\n//     }\n\n//     actions.resetForm();\n//   };\n\n//   return (\n//     <Formik\n//       initialValues={initialValues}\n//       onSubmit={handleSubmit}\n//       validationSchema={schema}\n//     >\n//       <Form className={css.forma}>\n//         <label htmlFor=\"name\" className={css.label}>\n//           <span className={css.labelText}>Name</span>\n//           <Field type=\"text\" name=\"name\" className={css.input} />\n//           <ErrorMessage name=\"name\" component=\"span\" className={css.error} />\n//         </label>\n//         <label htmlFor=\"number\" className={css.label}>\n//           <span className={css.labelText}>Number</span>\n//           <Field type=\"tel\" name=\"number\" className={css.input} />\n//           <ErrorMessage name=\"number\" component=\"span\" className={css.error} />\n//         </label>\n//         <div className={css.btnWraper}>\n//           <button type=\"submit\" className={css.btn}>\n//             Add contact\n//           </button>\n//         </div>\n//       </Form>\n//     </Formik>\n//   );\n// };\n\n// export default ContactForm;\n","import styled from \"@emotion/styled\";\n\nexport const Sect = styled.section`\npadding-top: 20px;\n`;\n\nexport const TitleWraper = styled.div`\nwidth: 100wh;\n\n@media screen and (min-width: 768px) {\n    width: 500px;\n  }\n`;\n\nexport const Label = styled.h2`\ndisplay: block;\nmargin: 0 auto:\ncolor: black;\nfont-size: 24px;\nfont-weight: 700;\nline-height: 2;\nletter-spacing: 0.06em;\ntext-align: center;\nmargin-bottom: 30px;\n`;\n","import PropTypes from 'prop-types';\nimport { Sect, Label, TitleWraper } from './Section.styled';\n\nfunction Section({ title, children }) {\n  return (\n    <Sect>\n      <TitleWraper>{title && <Label>{title}</Label>}</TitleWraper>\n      {children}\n    </Sect>\n  );\n}\n\nSection.prototype = {\n  title: PropTypes.string,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Section;\n","\nimport Container from 'components/Container';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport { useGetContactsQuery } from 'redux/contacts/contact-api';\nimport Notification from '../components/Notification';\nimport ContactForm from 'components/ContactForm';\nimport Section from 'components/Section';\n\n\nfunction ContactsPage() {\n  const { data: contacts } = useGetContactsQuery();\n\n//   const dispatch = useDispatch();\n//   useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n\n    <Container>\n    <Section title=\"Phonebook\">\n      <ContactForm contacts={contacts}/>\n    </Section>\n\n    <Section title=\"Contacts:\">\n      {contacts && contacts.length > 1 && <Filter />}\n      {contacts && contacts.length > 0 ? (\n        <ContactList contacts={contacts}/>\n      ) : (\n        <Notification message=\"Your contactlist is empty\" />\n      )}\n    </Section>\n  </Container>\n\n\n    // <Container title=\"Contacts\">\n    //   <AddButton text=\"Add new contact\" />\n    //   <Filter />\n    //   {contacts && contacts.length > 0 ? (\n    //     <ContactList />\n    //   ) : (\n    //     <Notification message=\"Your contact list is empty\" />\n    //   )}\n    // </Container>\n  );\n}\n\nexport default ContactsPage;"],"names":["Input","styled","Label","LabelText","getFilter","state","contacts","filter","useSelector","dispatch","useDispatch","type","value","onChange","e","filterContacts","target","List","Item","Span","Btn","id","name","number","useDeleteContactMutation","deleteContact","isDeliting","isLoading","disabled","onClick","visibleContacts","normalizedFilter","toLowerCase","contact","includes","filtredContacts","map","visibleContact","Wraper","Text","Notification","message","prototype","PropTypes","useCreateContactMutation","createContact","useState","setName","setNumber","handleChange","resetInput","className","style","autoComplete","onSubmit","preventDefault","find","checkRepeatName","toast","checkRepeatNumber","trim","checkEmptyQuery","TextField","label","variant","color","format","mask","pattern","Button","size","Sect","TitleWraper","Section","title","children","useGetContactsQuery","data","Container","length"],"sourceRoot":""}