{"version":3,"file":"static/js/992.87ce2478.chunk.js","mappings":"iPAEaA,EAAQC,EAAAA,EAAAA,MAAH,sdAwBLC,EAAQD,EAAAA,EAAAA,MAAH,uFAMLE,EAAYF,EAAAA,EAAAA,KAAH,sH,oBChCTG,EAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,Q,SCuBjD,EAhBe,WACb,IAAMA,GAASC,EAAAA,EAAAA,IAAYJ,GACrBK,GAAWC,EAAAA,EAAAA,MAEjB,OACE,UAACR,EAAD,YACE,SAACC,EAAD,qCACA,SAACH,EAAD,CACEW,KAAK,OACLC,MAAOL,EACPM,SAAU,SAAAC,GAAC,OAAIL,GAASM,EAAAA,EAAAA,IAAeD,EAAEE,OAAOJ,e,UCf3CK,EAAOhB,EAAAA,EAAAA,GAAH,sB,SCCJiB,EAAOjB,EAAAA,EAAAA,GAAH,qOAeJkB,EAAOlB,EAAAA,EAAAA,KAAH,oKASJmB,EAAMnB,EAAAA,EAAAA,OAAH,qjB,UCLhB,EAlBwB,SAAC,GAA0B,IAAxBoB,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACnC,GAAmDC,EAAAA,EAAAA,MAAnD,eAAOC,EAAP,KAAmCC,EAAnC,KAAwBC,UAExB,OACE,UAACT,EAAD,YACE,SAACC,EAAD,IACCG,EAFH,KAEWC,GACT,SAACH,EAAD,CACET,KAAK,SACLiB,SAAUF,EACVG,QAAS,kBAAMJ,EAAcJ,IAH/B,SAKGK,EAAa,cAAgB,aARvBL,ICuBf,EAzBoB,SAAC,GAAkB,IAAhBf,EAAe,EAAfA,SACfC,GAASC,EAAAA,EAAAA,IAAYJ,GAarB0B,EAVkB,WACtB,IAAMC,EAAmBxB,EAAOyB,cAChC,OACE1B,GACAA,EAASC,QAAO,SAAA0B,GAAO,OACrBA,EAAQX,KAAKU,cAAcE,SAASH,MAKlBI,GAExB,OACE,SAAClB,EAAD,UACGa,EAAgBM,KAAI,SAAAC,GAAc,OACjC,SAAC,GAAD,UAA6CA,GAAvBA,EAAehB,U,mBCvBhCiB,EAASrC,EAAAA,EAAAA,IAAH,0BAKNsC,EAAOtC,EAAAA,EAAAA,EAAH,yHCJjB,SAASuC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACtB,OACE,SAACH,EAAD,WACE,SAACC,EAAD,UAAOE,MAKbD,EAAaE,UAAY,CACvBD,QAASE,IAAAA,OAAAA,YAGX,I,IAAA,I,UCZaC,GAAS3C,EAAAA,EAAAA,GAAO4C,EAAAA,GAAP5C,CAAH,yiBA2BN6C,EAAa7C,EAAAA,EAAAA,KAAH,sH,UC1BvB,SAAS8C,EAAT,GAAkC,IAATC,EAAQ,EAARA,KACvB,OACE,UAACJ,EAAD,CAAQK,GAAG,gBAAX,WACU,SAAC,MAAD,CAAQC,KAAM,MACtB,SAACJ,EAAD,UAAaE,OAKnBD,EAAcL,UAAY,CACxBM,KAAMG,IAAAA,QAGR,QCMA,MAhBA,WACE,IAAc7C,GAAa8C,EAAAA,EAAAA,MAAnBC,KAER,OACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAD,CAAeP,KAAK,oBACnB1C,GAAYA,EAASkD,OAAS,IAAK,SAAC,EAAD,IACnClD,GAAYA,EAASkD,OAAS,GAC7B,SAAC,EAAD,CAAalD,SAAUA,KAEvB,SAAC,EAAD,CAAcmC,QAAQ","sources":["components/Filter/Filter.styled.jsx","redux/contacts/contact-selectors.js","components/Filter/Filter.js","components/ContactList/ContactList.styled.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Notification/Notification.styled.jsx","components/Notification/Notification.js","components/BtnAddContact/BtnAddContact.styled.jsx","components/BtnAddContact/BtnAddContact.js","pages/ContactsPage.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Input = styled.input`\npadding-top: 14px;\npadding-bottom: 14px;\npadding-left: 10px;\nfont-weight: 400;\nfont-size: 14px;\nline-height: 1.88;\nletter-spacing: 0.06em;\nwidth: 200px;\nheight: 5px;\nborder: 1px solid rgba(33, 33, 33, 0.2);\nborder-radius: 4px;\ntransition: border 250ms cubic-bezier(0.4, 0, 0.2, 1), outline 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n&:hover {\n  cursor: pointer;\n}\n\n&:focus-visible {\n  border: 1px solid #2196f3;\n  outline: none;\n}\n`;\n\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\nmargin-bottom: 15px;\n`;\n\nexport const LabelText = styled.span`\ncolor: black;\nfont-size: 14px;\nfont-weight: 700;\nline-height: 2;\nletter-spacing: 0.06em;\n`;\n","export const getFilter = state => state.contacts.filter;\n","import React from 'react';\nimport { Input, Label, LabelText } from './Filter.styled';\n// import { filterContacts } from '../../redux/contacts/contacts-actions';\nimport { filterContacts } from 'redux/contacts/contacts-slice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {getFilter} from '../../redux/contacts/contact-selectors'\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <Label>\n      <LabelText>Find contacts by name</LabelText>\n      <Input\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(filterContacts(e.target.value))}\n      />\n    </Label>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul``;\n\n","import styled from '@emotion/styled';\n\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n  width: 100wh;\n\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 500px;\n  }\n`;\n\nexport const Span = styled.span`\n  display: block;\n  width: 10px;\n  height: 10px;\n  margin-right: 5px;\n  border-radius: 50%;\n  background: black;\n  margin-left: 5px;\n`;\nexport const Btn = styled.button`\npadding: 2px 5px;\ncolor: black;\nbackground-color: #ffff;\nfont-weight: 500;\nfont-size: 10px;\nline-height: 1.88;\nletter-spacing: 0.06em;\nborder: none;\nborder-radius: 4px;\nborder: 1px solid rgba(238, 238, 238, 1);\nbox-shadow: 0px 4px 4px;\nwidth: 80px;\nheight: 25px;\nmargin-left: auto;\ntransition: color 250ms cubic-bezier(0.4, 0, 0.2, 1), background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n&:hover,\n&:focus {\n  background-color: #1e90ff;\n  color: #ffffffff;\n}\n&:active {\n  background-color: #1e90ff;\n  color: red;\n}\n`;\n","import React from 'react';\nimport { Span, Item, Btn } from './ContactListItem.styled';\nimport { useDeleteContactMutation } from '../../redux/contacts/contact-api';\n\nconst ContactListItem = ({ id, name, number }) => {\n  const [deleteContact, { isLoading: isDeliting }] = useDeleteContactMutation();\n\n  return (\n    <Item key={id}>\n      <Span></Span>\n      {name}: {number}\n      <Btn\n        type=\"button\"\n        disabled={isDeliting}\n        onClick={() => deleteContact(id)}\n      >\n        {isDeliting ? 'Deliting...' : 'Delete'}\n      </Btn>\n    </Item>\n  );\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport { List } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contact-selectors';\nimport ContactListItem from '../ContactListItem';\n\nconst ContactList = ({ contacts }) => {\n  const filter = useSelector(getFilter);\n\n\n  const filtredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return (\n      contacts &&\n      contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      )\n    );\n  };\n\n  const visibleContacts = filtredContacts();\n\n  return (\n    <List>\n      {visibleContacts.map(visibleContact => (\n        <ContactListItem key={visibleContact.id} {...visibleContact} />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import styled from \"@emotion/styled\";\n\nexport const Wraper = styled.div`\n\n`;\n\n\nexport const Text = styled.p`\ncolor: black;\nfont-weight: 700;\nfont-size: 16px;\nline-height: 1.88;\nletter-spacing: 0.06em;\n`;\n","import PropTypes from 'prop-types';\nimport { Wraper, Text } from './Notification.styled';\n\nfunction Notification({ message }) {\n  return (\n    <Wraper>\n      <Text>{message}</Text>\n    </Wraper>\n  );\n}\n\nNotification.prototype = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Button = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 215px;\n  height: 40px;\n  margin-bottom: 50px;\n  color: black;\n  background-color: #ffff;\n  font-family: inherit;\n  border: none;\n  cursor: pointer;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);, background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  text-decoration: none;\n\n\n  &:hover,\n  &:focus {\n    background-color: #1e90ff;\n    color: #ffffffff;\n  }\n  &:active {\n    background-color: #1e90ff;\n    color: red;\n  }\n`;\n\nexport const ButtonText = styled.span`\n  margin-right: 10px;\n  text-transform: uppercase;\n  font-sixe: 30px;\n  font-weight: 700;\n`;","import { Button, ButtonText } from './BtnAddContact.styled';\nimport { TiPlus } from \"react-icons/ti\";\nimport propTypes from 'prop-types';\n\nfunction DtnAddContact({ text }) {\n  return (\n    <Button to=\"/contacts/add\">\n              <TiPlus size={20} />\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  );\n}\n\nDtnAddContact.prototype = {\n  text: propTypes.string,\n};\n\nexport default DtnAddContact;","import Container from 'components/Container';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport { useGetContactsQuery } from 'redux/contacts/contact-api';\nimport Notification from '../components/Notification';\nimport BtnAddContact from 'components/BtnAddContact';\n\nfunction ContactsPage() {\n  const { data: contacts } = useGetContactsQuery();\n\n  return (\n    <Container>\n      <BtnAddContact text=\"Add new contact\" />\n      {contacts && contacts.length > 1 && <Filter />}\n      {contacts && contacts.length > 0 ? (\n        <ContactList contacts={contacts} />\n      ) : (\n        <Notification message=\"Your contactlist is empty\" />\n      )}\n    </Container>\n  );\n}\n\nexport default ContactsPage;\n"],"names":["Input","styled","Label","LabelText","getFilter","state","contacts","filter","useSelector","dispatch","useDispatch","type","value","onChange","e","filterContacts","target","List","Item","Span","Btn","id","name","number","useDeleteContactMutation","deleteContact","isDeliting","isLoading","disabled","onClick","visibleContacts","normalizedFilter","toLowerCase","contact","includes","filtredContacts","map","visibleContact","Wraper","Text","Notification","message","prototype","PropTypes","Button","Link","ButtonText","DtnAddContact","text","to","size","propTypes","useGetContactsQuery","data","Container","BtnAddContact","length"],"sourceRoot":""}