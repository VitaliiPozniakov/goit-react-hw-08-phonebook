{"version":3,"file":"static/js/905.ac34908d.chunk.js","mappings":"6PACA,EAAuB,0BAAvB,EAA6D,+B,mBCuH7D,MA9GA,YAAoC,IAAbA,EAAY,EAAZA,SACfC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,MAAjBC,GAAP,eAEA,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MAEd,OAAQP,GACN,IAAK,OACHC,EAAQM,GACR,MAEF,IAAK,SACHJ,EAAUI,GACV,MAEF,QACE,SA2CAC,EAAa,WACjBP,EAAQ,IACRE,EAAU,KAGZ,OACE,kBAAMM,UAAWC,EAAYC,aAAa,MAAMC,SA1B7B,SAAAP,GAEnB,OADAA,EAAEQ,iBApBoB,SAAAb,GACtB,cAAON,QAAP,IAAOA,OAAP,EAAOA,EAAUoB,MACf,SAAAC,GAAO,OAAIA,EAAQf,KAAKgB,gBAAkBhB,EAAKgB,iBAmB7CC,CAAgBjB,IACXkB,EAAAA,EAAAA,IAAM,sBAAD,OAAuBlB,EAAvB,8BAhBU,SAAAE,GACxB,cAAOR,QAAP,IAAOA,OAAP,EAAOA,EAAUoB,MAAK,SAAAC,GAAO,OAAIA,EAAQb,SAAWA,KAgBzCiB,CAAkBjB,IACpBgB,EAAAA,EAAAA,IAAM,uBAAD,OAAwBhB,EAAxB,8BAdQ,SAACF,EAAME,GAC7B,MAAuB,KAAhBF,EAAKoB,QAAmC,KAAlBlB,EAAOkB,OAczBC,CAAgBrB,EAAME,GACxBgB,EAAAA,GAAAA,KAAW,8CAZI,SAAAhB,GACxB,cAAcA,IAAYoB,OAajBC,CAAkBrB,GAClBgB,EAAAA,GAAAA,MAAY,yCAGnBpB,EAAc,CAAEE,KAAAA,EAAME,OAAAA,IACtBP,EAAS,aACTuB,EAAAA,GAAAA,KAAW,mDAEbV,MASA,WACC,SAACgB,EAAA,EAAD,CACGC,MAAM,OACNC,QAAQ,WACRC,MAAM,UACNC,KAAK,OACL5B,KAAK,OACLO,MAAOP,EACP6B,SAAUzB,EACVK,UAAWC,KAGd,SAACc,EAAA,EAAD,CACGC,MAAM,SACNC,QAAQ,WACRC,MAAM,UACNG,OAAO,kBACPC,KAAK,IACLC,QAAQ,yBACRJ,KAAK,MACL5B,KAAK,SACLO,MAAOL,EACP2B,SAAUzB,EACVK,UAAWC,KAId,SAACuB,EAAA,EAAD,CACKP,QAAQ,WACRC,MAAM,UACNO,KAAK,QACLN,KAAK,SAJV,qBC9FL,MATA,WAEE,OACE,SAACO,EAAA,EAAD,WACE,SAAC,EAAD","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","pages/AddContacPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"textField\":\"ContactForm_textField__62nkS\"};","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport {\n  useCreateContactMutation,\n} from '../../redux/contacts/contact-api';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport style from './ContactForm.module.css';\nimport {  useNavigate } from 'react-router-dom';\n\nfunction ContactForm({ contacts }) {\n  const navigate = useNavigate();\n  const [createContact] = useCreateContactMutation();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const checkRepeatName = name => {\n    return contacts?.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n  };\n\n  const checkRepeatNumber = number => {\n    return contacts?.find(contact => contact.number === number);\n  };\n\n  const checkEmptyQuery = (name, number) => {\n    return name.trim() === '' || number.trim() === '';\n  };\n\n  const checkTypeOfNumber = number => {\n    return typeof(number) !== Number;\n  };\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (checkRepeatName(name)) {\n      return toast(`Contact with name \"${name}\" is already in phonebook`);\n    } else if (checkRepeatNumber(number)) {\n      return toast(`Contact with phone \"${number}\" is already in phonebook`);\n    } else if (checkEmptyQuery(name, number)) {\n      return toast.info(\"Enter the contact's name and number phone!\");\n    } \n    else if (checkTypeOfNumber(number)) {\n      return toast.error(\"Invalid phone format. Enter numbers.\");\n    }\n    else {\n      createContact({ name, number });\n      navigate(\"/contacts\")      \n      toast.info(\"Contact successfully add to your phonebook\");\n    }\n    resetInput();\n  };\n\n  const resetInput = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={style.form} autoComplete=\"off\" onSubmit={handleSubmit}>\n     <TextField\n        label=\"Name\"\n        variant=\"outlined\"\n        color=\"primary\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        className={style.textField}\n      />\n     \n     <TextField\n        label=\"Number\"\n        variant=\"outlined\"\n        color=\"primary\"\n        format=\"(###) ###-##-##\"\n        mask=\"_\"\n        pattern=\"^[0-9\\s\\(\\)\\-]{15}\"\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleChange}\n        className={style.textField}\n      />\n     \n  \n     <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n        >\n      Add\n        </Button>\n\n\n    </form>\n  );\n}\n\nexport default ContactForm;\n\n\n\n// import React from 'react';\n// import css from './ContactForm.module.css';\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\n// import * as yup from 'yup';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import {\n//   useCreateContactMutation,\n// } from '../../redux/contacts/contact-api';\n\n// const schema = yup.object().shape({\n//   name: yup\n//     .string()\n//     .min(2)\n//     .max(32)\n//     .trim()\n//     .matches()\n//     .required('Please enter name'),\n//   number: yup.number().required('Please enter phone number'),\n// });\n\n// const initialValues = {\n//   name: '',\n//   number: '',\n// };\n\n\n\n// const ContactForm = ({ contacts }) => {\n\n\n//   const [createContact] = useCreateContactMutation();\n\n\n//   const checkRepeatName = name => {\n//     return contacts.find(\n//       contact => contact.name.toLowerCase() === name.toLowerCase()\n//     );\n//   };\n\n//   const checkRepeatNumber = number => {\n//     return contacts.find(contact => contact.number === number);\n//   };\n\n//   const handleSubmit = (values, actions) => {\n//     const { name, number } = values;\n\n//     if (checkRepeatName(name)) {\n//       Notify.warning(`Contact with name \"${name}\" is already in phonebook`);\n//     } else if (checkRepeatNumber(number)) {\n//       Notify.warning(`Contact with phone \"${number}\" is already in phonebook`);\n//     } else {\n//       createContact({ name, number });\n//     }\n\n//     actions.resetForm();\n//   };\n\n//   return (\n//     <Formik\n//       initialValues={initialValues}\n//       onSubmit={handleSubmit}\n//       validationSchema={schema}\n//     >\n//       <Form className={css.forma}>\n//         <label htmlFor=\"name\" className={css.label}>\n//           <span className={css.labelText}>Name</span>\n//           <Field type=\"text\" name=\"name\" className={css.input} />\n//           <ErrorMessage name=\"name\" component=\"span\" className={css.error} />\n//         </label>\n//         <label htmlFor=\"number\" className={css.label}>\n//           <span className={css.labelText}>Number</span>\n//           <Field type=\"tel\" name=\"number\" className={css.input} />\n//           <ErrorMessage name=\"number\" component=\"span\" className={css.error} />\n//         </label>\n//         <div className={css.btnWraper}>\n//           <button type=\"submit\" className={css.btn}>\n//             Add contact\n//           </button>\n//         </div>\n//       </Form>\n//     </Formik>\n//   );\n// };\n\n// export default ContactForm;\n","import Container from 'components/Container';\nimport ContactForm from 'components/ContactForm';\n\nfunction AddContactPage() {\n\n  return (\n    <Container>\n      <ContactForm/>\n    </Container>\n  );\n}\n\nexport default AddContactPage;"],"names":["contacts","navigate","useNavigate","useCreateContactMutation","createContact","useState","name","setName","number","setNumber","handleChange","e","target","value","resetInput","className","style","autoComplete","onSubmit","preventDefault","find","contact","toLowerCase","checkRepeatName","toast","checkRepeatNumber","trim","checkEmptyQuery","Number","checkTypeOfNumber","TextField","label","variant","color","type","onChange","format","mask","pattern","Button","size","Container"],"sourceRoot":""}